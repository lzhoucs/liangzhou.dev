#+title: Vue 3 UI
#+date: 2020-03-22T23:17:55-05:00
#+showDate: true
#+draft: true
#+categories: Development
#+tags: vue.js

* Links
** vuetify
- [[https://github.com/vuetifyjs/vuetify/tree/next][vuetify ~next~ branch]]
- [[https://www.notion.so/d107077314ca4d2896f0eeba49fe8a14?v=5cc7c08e9cc44021a7c86a20f189b0ba][Tasks Board]]
- [[https://github.com/vuetifyjs/vuetify/compare/dev...next][compare/dev...next]]

** material-components-web
- [[https://github.com/material-components/material-components-web][material-components-web Repo]] and [[https://material-components.github.io/material-components-web-catalog/][Demos]]
- [[https://github.com/matsp/material-components-vue][material-components-vue Repo]] and [[https://matsp.github.io/material-components-vue/][Demos]] using [[https://github.com/material-components/material-components-web/blob/master/docs/integrating-into-frameworks.md#the-simple-approach-wrapping-mdc-web-vanilla-components][Simple Approach]]
- [[https://github.com/pgbross/vue-material-adapter][vue-material-adapter Repo]], using [[https://github.com/material-components/material-components-web/blob/master/docs/integrating-into-frameworks.md#the-advanced-approach-using-foundations-and-adapters][Advanced Approach]]

** Vue 3
- [[https://github.com/vuejs/vue/projects/6][Roadmap Board]]
- [[https://github.com/vuejs/rfcs/pulls?q=is%3Apr+is%3Amerged+label%3A3.x][Upcoming changes in 3.0(merged rfc)]]
- [[https://github.com/vuejs/vue-next][vue-next Repo]]
- [[https://github.com/vuejs/vue-next-webpack-preview][vue-next-webpack-preview Repo]]
- [[https://github.com/vuejs/vue-cli-plugin-vue-next][vue-cli-plugin-vue-next Repo]]
- [[https://github.com/vuejs/vue-loader/tree/next][vue-loader ~next~ branch]]
- [[https://vue-next-template-explorer.netlify.com/][vue-next-template-explorer]]
- [[https://composition-api.vuejs.org/][Composition API Docs]]

** Vue 2
- [[https://github.com/vuejs/ui][Official vuejs/ui]]
 
* Dev logs
** Some thoughts and plan come to mind
 - Two projects/repos: one for components, one for widgets(larger UI components built with the former as building blocks)
 - Vue 3
 - Start as private project, make it public when going to alpha
 - directives such as ripple should be "installed" to be globally available
 - API Design. Use prop over slot source content can be provided as string
   format. use slot when content structure is unknown. This rule potentially
   gets rid of a lot of nested sub components, e.g: ~vmc-list-item~
 - Demo App. Show UI and markup side by side. This is to highlight the
   simplicity of the APIs
 - Put a component separately when it is user facing, otherwise put it
   internally where used.
 - API Design: Slot or sub components?
   Use slot when user should only provide content, not positioning of the
   content. Use sub component when user wants to control more than just
   content, but also positioning of it as well as extra behaviors on its own

** Issues and workarounds
- yarn won't install peerDependencies
  - [[https://github.com/yarnpkg/yarn/issues/1503][yarn/issues/1503]]
  - One solution: [[https://dev.to/yvonnickfrin/how-to-handle-peer-dependencies-when-developing-modules-18fa][Use prepare]]
  - Another solution: Use devDependency. Used in [[https://github.com/vuetifyjs/vuetify/blob/master/package.json#L56][vuetify]] and [[https://github.com/vuejs/ui/blob/master/package.json#L73][@vue/ui]]
- Duplicated packages. One from main app, one from local symbolically link
  package.
  - [[https://medium.com/@penx/managing-dependencies-in-a-node-package-so-that-they-are-compatible-with-npm-link-61befa5aaca7][Duplicated packages resolution]]
** Questions
- Is it necessary to have a build step that compiles .vue files into .js and
  .css as a library like what vuetify is doing? Or shall it assume/rely on the
  app to do the job?
- https://github.com/vuejs/vue/issues/4332
- https://stackoverflow.com/questions/57698768/can-i-modify-vue-js-vnodes
- https://github.com/vuejs/vue/issues/4766#issuecomment-274347398
